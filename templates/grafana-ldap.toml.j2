# Managed by ansible

verbose_logging = false

[[servers]]
host = "{{ grafana_auth_ldap_host |d('') }}"
port = "{{ grafana_auth_ldap_port |d('389') }}"

use_ssl = false
start_tls = false
ssl_skip_verify = false
# root_ca_cert = "/path/to/certificate.crt"

bind_dn = "uid=%s,cn=users,cn=accounts,{{ grafana_auth_ldap_dc |d('dc=example,dc=com') }}"

# Search user bind password
# If the password contains # or ; you have to wrap it with trippel quotes. Ex """#password;"""
#bind_password = 'x'

# User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
search_filter = "{{ grafana_auth_ldap_search_filter |d('(uid=%s)') }}"
search_base_dns = ["cn=users,cn=accounts,{{ grafana_auth_ldap_dc |d('dc=example,dc=com') }}"]

## Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available)
#group_search_filter = "(&(objectClass=groupOfNames)(cn=grafana*))"
## An array of the base DNs to search through for groups. Typically uses ou=groups
group_search_base_dns = ["cn=groups,cn=accounts,{{ grafana_auth_ldap_dc |d('dc=example,dc=com') }}"]

[servers.attributes]
name = "givenName"
surname = "sn"
username = "uid"
member_of = "memberOf"
email =  "email"

[[servers.group_mappings]]
group_dn = "cn=grafana-admin,cn=groups,cn=accounts,{{ grafana_auth_ldap_dc |d('dc=example,dc=com') }}"
org_role = "Admin"
# The Grafana organization database id, optional, if left out the default org (id 1) will be used.  Setting this allows for multiple group_dn's to be assigned to the same org_role provided the org_id differs
#org_id = 1

[[servers.group_mappings]]
group_dn = "cn=grafana-editor,cn=groups,cn=accounts,{{ grafana_auth_ldap_dc |d('dc=example,dc=com') }}"
org_role = "Editor"

[[servers.group_mappings]]
# If you want to match all (or no ldap groups) then you can use wildcard
group_dn = "*"
org_role = "Viewer"
